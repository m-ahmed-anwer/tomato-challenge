import { ReactNode } from 'react';
import { GestureResponderEvent, PressableProps } from 'react-native';
export declare type ButtonTypes = {
    activityColor?: string;
    activeOpacity?: number;
    animatedPlaceholder?: boolean;
    backgroundActive?: string;
    backgroundColor?: string;
    backgroundDarker?: string;
    backgroundPlaceholder?: string;
    backgroundProgress?: string;
    backgroundShadow?: string;
    borderColor?: string;
    borderRadius?: number;
    borderBottomLeftRadius?: number;
    borderBottomRightRadius?: number;
    borderTopLeftRadius?: number;
    borderTopRightRadius?: number;
    debouncedPressTime?: number;
    borderLeftBottomRadius?: number;
    borderWidth?: number;
    progressLoadingTime?: number;
    extra?: any;
    disabled?: boolean;
    height?: number;
    hitSlop?: PressableProps['hitSlop'];
    paddingHorizontal?: number;
    paddingTop?: number;
    progress?: boolean;
    before?: ReactNode;
    dangerouslySetPressableProps?: PressableProps;
    after?: ReactNode;
    paddingBottom?: number;
    raiseLevel?: number;
    springRelease?: boolean;
    stretch?: boolean;
    style?: any;
    textFontFamily?: string;
    textColor?: string;
    textLineHeight?: number;
    textSize?: number;
    width?: number | null;
    children?: string | ReactNode;
    onPress?: (callback?: () => void) => void;
    onLongPress?: PressableProps['onLongPress'];
    onPressIn?: (event: GestureResponderEvent) => void;
    onPressOut?: (event: GestureResponderEvent) => void;
    onPressedIn?: () => void;
    onPressedOut?: () => void;
    onProgressStart?: () => void;
    onProgressEnd?: () => void;
};
declare const AwesomeButton: ({ activityColor, activeOpacity, animatedPlaceholder, backgroundActive, backgroundColor, backgroundDarker, backgroundPlaceholder, backgroundProgress, backgroundShadow, borderColor, borderRadius, borderBottomLeftRadius, borderBottomRightRadius, borderTopLeftRadius, borderTopRightRadius, borderWidth, children, before, after, disabled, height, hitSlop, debouncedPressTime, paddingHorizontal, onPress, onPressIn, onPressedIn, onPressOut, onPressedOut, onProgressStart, onProgressEnd, onLongPress, dangerouslySetPressableProps, progress, paddingBottom, paddingTop, progressLoadingTime, raiseLevel, springRelease, stretch, style, textColor, textLineHeight, textSize, textFontFamily, width, extra, }: ButtonTypes) => JSX.Element;
export default AwesomeButton;

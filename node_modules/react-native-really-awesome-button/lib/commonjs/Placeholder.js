"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _helpers = require("./helpers");
var _styles = require("./styles");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const Placeholder = _ref => {
  let {
    animated,
    style
  } = _ref;
  const animating = (0, _react.useRef)(false);
  const [width, setWidth] = (0, _react.useState)(0);
  const animatedValue = (0, _react.useRef)(new _reactNative.Animated.Value(0)).current;
  (0, _react.useEffect)(() => {
    if (width > 0 && animating.current === false && animated === true) {
      animating.current = true;
      (0, _helpers.animateLoop)({
        variable: animatedValue,
        toValue: 1
      });
    }
  }, [width]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_styles.styles.container__placeholder, ...style],
    onLayout: event => {
      setWidth(event.nativeEvent.layout.width);
    }
  }, animated === true && /*#__PURE__*/_react.default.createElement(_reactNative.Animated.View, {
    testID: "aws-btn-content-placeholder",
    style: [...style, _styles.styles.container__placeholder__bar, {
      transform: [{
        translateX: animatedValue.interpolate({
          inputRange: [0, 0.2, 0.5, 0.7, 1],
          outputRange: [width * -1, width * -1, width, width, width * -1]
        })
      }]
    }]
  }));
};
var _default = Placeholder;
exports.default = _default;
//# sourceMappingURL=Placeholder.js.map